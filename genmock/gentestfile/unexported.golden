// Code generated by genmock DO NOT EDIT.
// github.com/philpearl/ut/genmock
package testcode

import (
	"fmt"
	"github.com/philpearl/ut"
	"testing"
)

type mockInterface4 struct {
	ut.CallTracker
}

func newMockInterface4(t *testing.T) *mockInterface4 {
	return &mockInterface4{ut.NewCallRecords(t)}
}
func (m *mockInterface4) AddCall(name string, params ...any) ut.CallTracker {
	switch name {
	case "Method1", "Method2", "Method3", "Method4":
		break
	default:
		panic(fmt.Errorf("AddCall: %T has no method %s", m, name))
	}
	m.CallTracker.AddCall(name, params...)
	return m
}
func (m *mockInterface4) SetReturns(params ...any) ut.CallTracker {
	m.CallTracker.SetReturns(params...)
	return m
}
func (i *mockInterface4) Method4(value4 string) error {
	r := i.TrackCall("Method4", value4)
	var r_0 error
	if r[0] != nil {
		r_0 = r[0].(error)
	}
	return r_0
}
func (i *mockInterface4) Method1(value1 string) error {
	r := i.TrackCall("Method1", value1)
	var r_0 error
	if r[0] != nil {
		r_0 = r[0].(error)
	}
	return r_0
}
func (i *mockInterface4) Method2(value2 string) error {
	r := i.TrackCall("Method2", value2)
	var r_0 error
	if r[0] != nil {
		r_0 = r[0].(error)
	}
	return r_0
}
func (i *mockInterface4) Method3(value3 string) error {
	r := i.TrackCall("Method3", value3)
	var r_0 error
	if r[0] != nil {
		r_0 = r[0].(error)
	}
	return r_0
}
