// Code generated by genmock DO NOT EDIT.
// github.com/philpearl/ut/genmock
package example

import (
	"fmt"
	"testing"
	"github.com/philpearl/ut"
)

type MockFred struct {
	ut.CallTracker
}

func NewMockFred(t *testing.T) *MockFred {
	return &MockFred{ut.NewCallRecords(t)}
}
func (m *MockFred) AddCall(name string, params ...any) ut.CallTracker {
	switch name {
	case "adonit", "doit", "donit", "iit", "many", "sanit":
		break
	default:
		panic(fmt.Errorf("AddCall: %T has no method %s", m, name))
	}
	m.CallTracker.AddCall(name, params...)
	return m
}
func (m *MockFred) SetReturns(params ...any) ut.CallTracker {
	m.CallTracker.SetReturns(params...)
	return m
}
func (i *MockFred) sanit(blah string) {
	i.TrackCall("sanit", blah)
	return
}
func (i *MockFred) iit(fred any) {
	i.TrackCall("iit", fred)
	return
}
func (i *MockFred) many(things ...string) {
	ut__params := make([]any, 0+len(things))
	for j, p := range things {
		ut__params[0+j] = p
	}
	i.TrackCall("many", ut__params...)
	return
}
func (i *MockFred) doit(blah string) int {
	r := i.TrackCall("doit", blah)
	var r_0 int
	if r[0] != nil {
		r_0 = r[0].(int)
	}
	return r_0
}
func (i *MockFred) donit(blah, fah string) (int, error) {
	r := i.TrackCall("donit", blah, fah)
	var r_0 int
	if r[0] != nil {
		r_0 = r[0].(int)
	}
	var r_1 error
	if r[1] != nil {
		r_1 = r[1].(error)
	}
	return r_0, r_1
}
func (i *MockFred) adonit(blah, fah George, brian func(int) error) (int, error) {
	r := i.TrackCall("adonit", blah, fah, brian)
	var r_0 int
	if r[0] != nil {
		r_0 = r[0].(int)
	}
	var r_1 error
	if r[1] != nil {
		r_1 = r[1].(error)
	}
	return r_0, r_1
}
